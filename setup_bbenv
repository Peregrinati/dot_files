#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess

from collections import namedtuple

HOME = os.path.expanduser("~")


def prompt(txt):
    val = None
    print("\n" + txt + ":")
    try:
        val = input().strip()
    except (EOFError, KeyboardInterrupt):
        print()
    return val


def parse_args():
    parser = argparse.ArgumentParser(
        description='Set up the bbenv')
    parser.add_argument(
        '-r', '--root',
        default=HOME + '/.bbenv/',
        help=('The path to the bbenv checkout. (default: "~/.bbenv/)"')
    )
    parser.add_argument(
        '-i', '--install',
        action='store_true',
        default=False,
        help='The path to the bbenv checkout. (default: "~/.bbenv/)"')
    return parser.parse_args()

call = lambda cmd: subprocess.call(cmd, shell=True)


# ======== SCRIPT START =========

args = parse_args()

os.chdir(HOME)

if args.install:
    MACPORTS_PKGS = (
        'install itstool py27-pip maven3 bash-completion htop ctags tree curl'
        'install tmux neovim',
        'install py27-readline',
        'install python2 +readline',
        'install python35 +readline',
        'install py35-pip',
        'install openssh +ssh-copy-id',
        'install git +bash_completion +svn',
        'install zsh zsh-completions',
        'select --set maven maven3',
    )
    PIP_PKGS = (
        'git-review',
        'isort',
        'paramiko',
        'pep8',
        'polib',
        'prettytable',
        'pylint',
        'scp',
        'neovim',
    )
    PIP3_PKGS = (
        'neovim',
    )

    for pkg in MACPORTS_PKGS:
        call('port ' + pkg)
    call('pip install ' + ' '.join(PIP_PKGS))
    call('pip-3.5 install ' + ' '.join(PIP3_PKGS))
    call('sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"')

# Symlink dot files
Symlink = namedtuple('Symlink', ('src', 'target'))
symlinks = []

def link(*subdirs, excluded=None):
    dot = lambda s: '.' + s

    base_dir = os.path.join(args.root, *subdirs)

    subdirs = list(subdirs)
    if len(subdirs) > 0:
        subdirs[0] = dot(subdirs[0])

    for file_name in os.listdir(base_dir):
        file_path = os.path.join(base_dir, file_name)
        new_path = os.path.join(
            HOME,
            *(subdirs + [dot(file_name) if len(subdirs) == 0 else file_name])
        )
        if excluded is None or file_name not in excluded:
            symlinks.append(Symlink(file_path, new_path))

# Link dotfiles
link(excluded=(
    "README.md",
    "config",
    ".git",
    ".gitignore",
    "oh-my-zsh",
    os.path.basename(__file__),
))
link('config')
link('oh-my-zsh', 'custom')

for sym in symlinks:
    print("symlinking '{}' to '{}'".format(sym.src, sym.target))
if prompt('Are you sure you wish to continue? [y/N]') != 'y':
    sys.exit()

for sym in symlinks:
    try:
        call('mkdir -p ' + os.path.join(HOME, os.path.dirname(sym.target)))
        os.symlink(sym.src, sym.target)
    except OSError:
        os.unlink(sym.target)
        os.symlink(sym.src, sym.target)
